package com.airlinemanagement;

import com.airlinemanagement.controller.AirlineController;


public class Main {
    public static void main(String[] args) {
        AirlineController controller = new AirlineController();
        controller.start();
    }
/*Като цяло по отношение на правилната работа на файловете, т.е. съхраняването на правилната информация
мислих или да създам метод - който в момента е persist в JsonUserRepository - тъй като на пръв поглед
там е необходим - но тогова ще трябва да имам проверка от вида "instance of", която ние се стремим да избегнем,
или именно за да я избегнем направо да го сложа в интерфейса - UserRepository, но тогава тези, които го
имплементират и InMemoryUserRepository, и JsonUserRepository трябва да го развият. Но InMemoryUserRepository няма
нужда от него - затова е и празен. Не ми изглеждаше най-правилно, но се поинтересувах и открих информация, че това е напълно приемливо, не е анти-практика.
Това е валиден Null Object Pattern: метод, който не прави нищо, но запазва съвместимост.
Другият вариант съм закоментирала в AddEmployeeCommand - undo там работи с
познат метод repository.deleteUser(lastAdded.getId()), който си прави необходимите промени чрез save на файла.
Трябва обаче да избера само един подход - не е коректно в едните команди да се вика persist, а в други например
delete- метод от repository-то. В този случай обаче ще трябва да направя и някои допълнителни методи в repository-та
Например в flight- репозиторита ще ми трябва метод за изтриване, който евентуално ще е и потенциално при развиване
на приложението, но на този етап ще бъде в полза само за синхронизация на информацията във файла.*/

}
